name: Publish Docker image
on:
  release:
    types: [created]
jobs:
  publish-image:
    name: Push Docker image to Docker Hub
    env:
      GO111MODULE: on
      CHANGE_MINIKUBE_NONE_USER: true
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/runner/work/kubernetes-operator/kubernetes-operator
      KUBECONFIG: /home/runner/work/kubernetes-operator/kubernetes-operator/.kube/config
      GO_VERSION: 1.14.7
      MINIKUBE_VERSION: v1.12.1
      OPERATOR_SDK_VERSION: v0.17.0
      MINIKUBE_KUBERNETES_VERSION: v1.17.4
      HELM_VERSION: v3.3.1
      HOME: /home/runner/work/kubernetes-operator/kubernetes-operator
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Prepare go environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: go-dep
        run: make go-dependencies

#      - name: imports
#        uses: grandcolline/golang-github-actions@v1.1.0
#        with:
#          run: imports
#          token: ${{ secrets.GITHUB_TOKEN }}
#          directory: ./

      #      - name: unit-tests
#        run: |
#          echo "packages=$(go list -f '{{.ImportPath}}/' ./... | grep -v vendor)" >> $GITHUB_ENV
#          echo "$(go list -f '{{.ImportPath}}/' ./... | grep -v vendor)"
#          echo "packages_for_unit_tests=$(go list -f '{{.ImportPath}}/' ./... | grep -v vendor | grep -v e2e)" >> $GITHUB_ENV
#          go fmt $packages
#          if which goimports; then
#            go get -u golang.org/x/tools/cmd/goimports
#          fi
#          @goimports -l -e $(find . -type f -name '*.go' -not -path "./vendor/*")
#      - name: Backup PVC - e2e
#        run: make -C backup/pvc/ docker-e2e UID=$(id -u) GID=$(id -g)

#      - name: Prepare environment for e2e
#        run: |
#          sudo apt-get update
#          sudo apt-get install socat
#          echo "https://storage.googleapis.com/kubernetes-release/release/$MINIKUBE_KUBERNETES_VERSION/bin/linux/amd64/kubectl"
#          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$MINIKUBE_KUBERNETES_VERSION/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
#          curl -Lo minikube https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
#          curl -Lo operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/$OPERATOR_SDK_VERSION/operator-sdk-$OPERATOR_SDK_VERSION-x86_64-linux-gnu && chmod +x operator-sdk && sudo mv operator-sdk /usr/local/bin/
#          ls -la
#          ls -la /usr/local/bin/
#          curl -Lo helm.tar.gz https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz && tar xzfv helm.tar.gz && sudo mv linux-amd64/helm /usr/local/bin/
#          sudo mkdir -p $HOME/.kube $HOME/.minikube
#          sudo touch $KUBECONFIG
#          sudo minikube start --vm-driver=none --kubernetes-version=$MINIKUBE_KUBERNETES_VERSION
#          sudo chown -R $USER $HOME/.kube $HOME/.minikube

#      - name: Jenkins Operator - e2e
#        run: make build e2e

#      - name: Jenkins Operator Helm Chart - e2e
#        run: make e2e BUILDTAGS=Helm E2E_TEST_SELECTOR='^.*Helm.*$'

      - name: Release Docker Image
        env:
          DOCKER_ORGANIZATION: sylviab
          DOCKER_REGISTRY: cool-operator
          GITCOMMIT: ${{ github.sha }}
          VERSION_TAG: $(cat VERSION.txt)
          USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          CONTAINER_RUNTIME_EXTRA_ARGS: ""
        run: |
          docker build \
          --build-arg GO_VERSION=$GO_VERSION \
          --build-arg OPERATOR_SDK_VERSION=$OPERATOR_SDK_VERSION \
          -t $DOCKER_REGISTRY:$GITCOMMIT . \
          --file build/Dockerfile $CONTAINER_RUNTIME_EXTRA_ARGS
          docker tag $DOCKER_REGISTRY:$GITCOMMIT $DOCKER_ORGANIZATION/$DOCKER_REGISTRY:$VERSION_TAG $CONTAINER_RUNTIME_EXTRA_ARGS
          docker push $DOCKER_ORGANIZATION/$DOCKER_REGISTRY:$VERSION_TAG $CONTAINER_RUNTIME_EXTRA_ARGS
          docker tag $DOCKER_REGISTRY:$GITCOMMIT $DOCKER_ORGANIZATION/$DOCKER_REGISTRY:latest $CONTAINER_RUNTIME_EXTRA_ARGS
          docker push $DOCKER_ORGANIZATION/$DOCKER_REGISTRY:latest $CONTAINER_RUNTIME_EXTRA_ARGS